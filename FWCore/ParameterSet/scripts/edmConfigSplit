#! /usr/bin/env python3

import sys
import os
import argparse
import types
from importlib.machinery import SourceFileLoader

from FWCore.ParameterSet.Mixins import PrintOptions

parser = argparse.ArgumentParser(
  description = '%(prog)s splits the given CMSSW configuration file into one file per top-level object, and outputs the configuration for the main process object.',
)
parser.add_argument('file', metavar = 'FILE')
parser.add_argument("configArgs",
  nargs=argparse.REMAINDER, help="arguments that will be passed to Python configuration file")

parser.add_argument('-o', '--output',
  metavar = 'OUT',
  type = argparse.FileType('w'),
  default = sys.stdout,
  help = 'write the process configuration to %(metavar)s instead of standard output')
parser.add_argument('-d', '--output-directory',
  metavar = 'DIR',
  type = str,
  default = None,
  help = 'create the individual files and subdirectories under %(metavar)s instead of the current directory; if %(metavar)s does not exist it will be created first')
parser.add_argument('-s', '--subdirectories',
  action = "store_true",
  default = False,
  help = 'create subdirectories for different modules categories')

args = parser.parse_args()

# delete all arguments, so they are not "seen" by the confguration file being split
sys.argv = [args.file]+args.configArgs

# make the behaviour of 'cmsRun file.py' and 'edmConfigSplit file.py' more consistent
sys.path.append(os.getcwd())

#handle = open(args.file, 'r')
loader=SourceFileLoader("pycfg", args.file)
mod=types.ModuleType(loader.name)
loader.exec_module(mod)
process = mod.process

options = PrintOptions()
options.useSubdirectories = args.subdirectories
options.targetDirectory = args.output_directory

files = process.splitPython(options)
for fn, c in files.items():
  if fn == '-':
    continue
  d = os.path.dirname(fn)
  if d and not os.path.isdir(d):
    os.makedirs(d)
  with open(fn, 'w') as f:
    f.write(c)

args.output.write(files['-'])
args.output.close()
